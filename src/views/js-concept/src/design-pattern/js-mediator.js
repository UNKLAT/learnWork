/**
 * 中介者模式
 * 用一个中介对象来封装一系列的对象交互。
 * 中介者使各对象不需要显式地相互引用，从而使其耦合松散，
 * 而且可以独立地改变它们之间的交互
 * 
 * 中介者是一个行为设计模式，通过提供一个统一的接口让系统的不同部分进行通信。
 * 一般，如果系统有很多子模块需要直接沟通，
 * 都要创建一个中央控制点让其各模块通过该中央控制点进行交互。
 * 中介者模式可以让这些子模块不需要直接沟通，而达到进行解耦的目的
 * 例如：机场的塔台，所有飞机的沟通通过塔台来完成，而不是飞机之间相互沟通
 */

//  我们先用伪代码来理解一下：

//  // 如下代码是伪代码，请不要过分在意代码
//  // 这里app命名空间就相当于扮演中介者的角色
//  var app = app || {};
  
//  // 通过app中介者来进行Ajax请求
//  app.sendRequest = function ( options ) {
//      return $.ajax($.extend({}, options);
//  }
  
//  // 请求URL以后，展示View
//  app.populateView = function( url, view ){
//    $.when(app.sendRequest({url: url, method: 'GET'})
//       .then(function(){
//           //显示内容
//       })
//  }
  
//  // 清空内容
//  app.resetView = function( view ){
//     view.html('');
//  }

//  中介者和观察者
// 到这里，大家可能迷糊了，中介者和观察者貌似差不多，有什么不同呢？其实是有点类似，但是我们来看看具体的描述：
// 观察者模式，没有封装约束的单个对象，相反，观察者Observer和具体类Subject是一起配合来维护约束的，
// 沟通是通过多个观察者和多个具体类来交互的：每个具体类通常包含多个观察者，而有时候具体类里的一个观察者也是另一个观察者的具体类。

// 而中介者模式所做的不是简单的分发，却是扮演着维护这些约束的职责。

// 中介者和外观模式
// 很多人可能也比较迷糊中介者和外观模式的区别，他们都是对现有各模块进行抽象，但有一些微妙的区别。

// 中介者所做的是在模块之间进行通信，是多向的，但外观模式只是为某一个模块或系统定义简单的接口而不添加额外的功能。
// 系统中的其它模块和外观模式这个概念没有直接联系，可以认为是单向性。